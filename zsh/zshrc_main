# $reset_color

#Load all sources needed for this zsh run configuration
source ~/.tmuxinator/tmuxinator.zsh
#source /root/zgen/zgen.zsh # if you want to run this script for the root home
source ~/.zgen/zgen.zsh
source ~/.zsh_plugins.zsh

#load all plugins you want from the .zsh_plugins.zsh file
load_plugins

# ______________________________________________
cGrn="190"
cCyn="122"
# # zgen selfupdate
# # setopt correctall
setopt auto_resume
setopt autocd
setopt chase_links	 # resolve symlinks
setopt completeinword
setopt extendedglob
setopt interactivecomments
unsetopt caseglob

# bindkey "^[[A" history-search-backward
# bindkey "^[[B" history-search-forward
cFg="2;38;5;"
# %d	actual text
infoBg=$BG[234];	infoFg=$FG[244];
errBg=$BG[052];		errFg=$FG[160]
zstyle ':completion:::::' completer _complete _approximate
zstyle ':completion:*:approximate:*' max-errors 2

zstyle ':completion:*' format "${infoBg}${infoFg}- [%d]${reset_color}"
# ':completion:function:completer:command:argument:tag'
zstyle ':completion:*' auto-description "$FG[240]specify: %d"
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' group-name ''
# # zstyle ':completion:*' list-colors ''
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(*)=='${cFg}${cGrn}'='$cFg'239}:${(s.:.)LS_COLORS}")';
zstyle ':completion:*:aliases' list-colors '=*='$cFg'072'
zstyle ':completion:*:options' list-colors '=(-- *)='$cFg'239'
# zstyle ':completion:*:options' list-colors '=^(-- *)=34'

# zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt "${infoBg}%SAt %p: TAB for more, or the character to insert%s${reset_color}"
# # zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
# zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' menu select=2 eval "$(dircolors -b)"
# zstyle ':completion:*' menu select=2 "{infoBg}${infoFg}"
# # zstyle ':completion:*' menu select=long
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
# zstyle ':completion:*' "select-prompt %SScrolling active: current selection at %p%s"
zstyle ':completion:*' "select-prompt %SScroll %p%s"
# zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
# zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
zstyle ':completion:*:killall:*' command 'ps -u $USER -o cmd'
zstyle ':completion:*:descriptions' format "$FG[094]xxxxxxxx%U%B%d%b%u"
zstyle ':completion:*:messages' format '%B%U---- %d%u%bxxxxxxxx'
zstyle ':completion:*:warnings' format "${errBg}${errFg}%BNo matches for:${reset_color} $FG[052]%d%b${reset_color}"

zstyle ':filter-select:highlight' matched fg=${cGrn}
zstyle ':filter-select:highlight' selected fg=black,bg=${cGrn}
zstyle ':filter-select:highlight' title fg=red
zstyle ':filter-select:highlight' marked fg=red
zstyle ':filter-select' case-insensitive yes
zstyle ':filter-select' extended-search yes
zstyle ':filter-select' rotate-list yes
# # zstyle ":completion:*:commands" rehash 1

# # ZSH=$HOME/.oh-my-zsh
# # source $ZSH/templates/zshrc.zsh-template


# # ____________________________________________________________________________________
# ZSH_THEME="miloshadzic"		# robbyrussell
# # alias zshconfig="mate ~/.zshrc"
# # alias ohmyzsh="mate ~/.oh-my-zsh"

# # CASE_SENSITIVE="true"			# Set to this to use case-sensitive completion
# DISABLE_AUTO_UPDATE="true"		# Comment this out to disable bi-weekly auto-update checks
# # export UPDATE_ZSH_DAYS=13		# Uncomment to change how often before auto-updates occur? (in days)
# # DISABLE_LS_COLORS="true"
# # DISABLE_AUTO_TITLE="true"		# disable autosetting terminal title.
# # DISABLE_CORRECTION="true"		# disable command autocorrection
# COMPLETION_WAITING_DOTS="true"	# red dots to be displayed while waiting for completion

# # disable marking untracked files under
# # VCS as dirty. This makes repository status check for large repositories much, much faster.
# # DISABLE_UNTRACKED_FILES_DIRTY="true"

# # plugins=(git)
# # plugins=(tmux colored-man colorize cp extract github nanoc perl python ssh-agent sublime tmux)
# plugins=(
# 	brew
# 	docker
# 	extract
# 	git
# 	history-substring-search
# 	python
# 	rvm
# 	sublime
# 	tmux
# 	zsh-syntax-highlighting
# 	rails
# 	ruby
# 	archlinux
# 	colorize
# 	ssh-agent
# 	nanoc
# 	perl
# 	cp
# 	github
# 	colored-man
# 	)
# # plugins=()

#fpath=(/root/.zgen/http:/git.code.sf.net/p/zsh/code-master/Completion/Linux/Command $fpath)
fpath=(/home/vulder/.zgen/http:/git.code.sf.net/p/zsh/code-master/Completion/Linux/Command $fpath)

# . /root/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true
# # ______________________________________________[powerline]
# # function powerline_precmd() {
# # 	export PS1="$(/root/powerline-shell.py $? --shell zsh 2> /dev/null)"
# # }
# # function install_powerline_precmd() {
# # 	for s in "${precmd_functions[@]}"; do
# # 		if [ "$s" = "powerline_precmd" ]; then
# # 			return
# # 		fi
# # 	done
# # 	precmd_functions+=(powerline_precmd)
# # }
# # install_powerline_precmd
# # ______________________________________________
# # bind UP and DOWN arrow keys
# zmodload zsh/terminfo
# bindkey "$terminfo[kcuu1]" history-substring-search-up
# bindkey "$terminfo[kcud1]" history-substring-search-down
# bindkey '^R' history-incremental-pattern-search-backward
bindkey '^R' zaw-history
bindkey '^Q' zaw

# bindkey '^Qf' zaw-open-file
# bindkey '^Qa' zaw-applications
# bindkey '^Qc' zaw-commands
# bindkey '^Qp' zaw-process
# bindkey '^Qs' zaw-ssh-hosts
# # autoload -Uz history-beginning-search-menu
# # zle -N history-beginning-search-menu
# # bindkey '^X^X' history-beginning-search-menu

HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=cyan,fg=white'
HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_NOT_FOUND='bg=red,fg=white,bold'
# HISTORY_SUBSTRING_SEARCH_GLOBBING_FLAGS='i'
# # ______________________________________________
# ZSH_HIGHLIGHT_HIGHLIGHTERS=(main root brackets pattern cursor)
for i in brackets main pattern ; do	# line root
	if [[ " ${ZSH_HIGHLIGHT_HIGHLIGHTERS[*]} " != *" $i "* ]]; then ZSH_HIGHLIGHT_HIGHLIGHTERS+=( $i ); fi
done

echo $plugins
ZSH_HIGHLIGHT_PATTERNS+=('ls -rf *' 'fg=white,bold,bg=red')

# ZSH_HIGHLIGHT_STYLES[alias]=fg=white,bold,underline,standout
ZSH_HIGHLIGHT_STYLES[alias]="fg=072"
# ZSH_HIGHLIGHT_STYLES[alias]=fg=white,bold
ZSH_HIGHLIGHT_STYLES[assign]="fg=yellow,bold"
ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
ZSH_HIGHLIGHT_STYLES[builtin]=fg=white,bold
ZSH_HIGHLIGHT_STYLES[command]=fg=white,bold
ZSH_HIGHLIGHT_STYLES[commandseparator]=none
ZSH_HIGHLIGHT_STYLES[default]=none
ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=magenta
ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=magenta,bold
ZSH_HIGHLIGHT_STYLES[function]=fg=green,bold
ZSH_HIGHLIGHT_STYLES[globbing]=fg=magenta,bold
ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[path]=fg=129
ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=005
ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
ZSH_HIGHLIGHT_STYLES[path_prefix]=fg=cyan
ZSH_HIGHLIGHT_STYLES[path_approx]=fg=cyan

# ZSH_HIGHLIGHT_STYLES[line]='bold'
# ZSH_HIGHLIGHT_STYLES[root]='bg=red'

# ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]='fg=yellow,bold'
# ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]='fg=234'
ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]="fg=160,bg=052"
# ZSH_HIGHLIGHT_STYLES[cursor-matchingbracket]="fg=${infoBg}"
ZSH_HIGHLIGHT_STYLES[bracket-error]='fg=red,bold'
ZSH_HIGHLIGHT_STYLES[bracket-level-1]='fg=blue,bold'
ZSH_HIGHLIGHT_STYLES[bracket-level-2]='fg=red,bold'
ZSH_HIGHLIGHT_STYLES[bracket-level-3]='fg=yellow,bold'
ZSH_HIGHLIGHT_STYLES[bracket-level-4]='fg=magenta,bold'

# # ZSH_THEME_PROMPT_PATH_COLOR=$FG[214]

# # ZSH_HIGHLIGHT_STYLES[alias]=red
# # ZSH_HIGHLIGHT_STYLES[assign]=none
# # ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=cyan
# # ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
# # ZSH_HIGHLIGHT_STYLES[default]=none
# # ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=cyan
# # ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
# # ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=yellow
# # ZSH_HIGHLIGHT_STYLES[globbing]=none
# # ZSH_HIGHLIGHT_STYLES[hashed-command]=none
# # ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=blue
# # ZSH_HIGHLIGHT_STYLES[path]=none
# # ZSH_HIGHLIGHT_STYLES[precommand]=none
# # ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=green
# # ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
# # ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=yellow
# # ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=red,bold

# # added by travis gem
# # [ -f /root/.travis/travis.sh ] && source /root/.travis/travis.sh

# ______________________________________________[OSO]
#. /usr/share/autojump/autojump.sh
# . /usr/share/autojump/autojump.zsh
. ~/.doto_src/autojump/bin/autojump.zsh
#source /oso/db/xcl/oso/_FC/_opt/sh/shOpt.sh

alias zNoflwLink="unsetopt chaselinks"

alias tmux="tmux -2"
function vim_sf() {
  if { [ $# -eq 0 ]; } then
    vim `sf`
  else
    vim $@
  fi
}
#alias vim=vim_sf

#HISTFILE=/root/.zsh-histfile
HISTFILE=$HOME/.zsh-histfile
HISTSIZE=5000
SAVEHIST=5000

#For chosing a colour code run 'spectrum_ls' in your oh-my-zsh
#The color in coloms after the description is the standard colour for comparison
fg_user=$FG[237]	# user at the start of the prompt (cyan)
fg_at=$FG[125]          # @-sign between user and host (purplisch)
fg_host=$FG[091]	# host name (cyan)
fg_oA=$FG[214]	        # path of your current location (orange)
fg_lineStart=$FG[237]	# character at the beginning of each line (grey)
fg_lgray=$FG[245]	# ip address on the right site of the prompt (grey)

if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then fg_oA=$FG[213]; fi	# ssh

#Other colour combinations
# fg_oA=$FG[227]	# yellow
# fg_oA=$FG[190]	# green
# fg_oB=$FG[237]	# grey
# fg_oB=$FG[038]	# cyan
# fg_host=$FG[121]	# turkis

# PROMPT='$FG[154]%~%'
# PROMPT="${fg_lgreen}%n${fg_lgray}[${fg_cyan}%~${fg_lgray}]: "
# PROMPT="${fg_oB}%n${fg_oB}[${fg_oA}%~${fg_oB}]: ${fg_lgray}"
#PS2='$FG[240]> '	# sub prompt
#PS3='$FG[254]?#'	# ksh
## PS4='($FG[154]${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]} - [${SHLVL},${BASH_SUBSHELL}, $?]'
#PS4='$FG[240][%N:$FG[060]%i$FG[240]]$reset_color $FG[190]'
#


ZSH_THEME_GIT_PROMPT_PREFIX=" %{$fg[green]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY=" %{$fg[red]%}⚡"
ZSH_THEME_GIT_PROMPT_CLEAN=""

function prompt_char {
	if [ $UID -eq 0 ]; then echo "%{$fg[red]%}#%{$reset_color%}"; else echo "%{$fg_lineStart%}>%{$reset_color%}"; fi
}

PROMPT='
%(?,,%{$fg[red]%}$? %{$reset_color%})%{$fg_user%}%n%{$fg_at%}@%{$fg_host%}%m%{$reset_color%}: %{$fg_oA%}%~%{$reset_color%}$(git_prompt_info)
$(prompt_char) '
#%_

function prompt_ip {
  ip address | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*'| grep -v '127.0.0.1' | grep -v '172.17.0.1'| head -1
}

#RPROMPT='%{$fg_lgray%}[%*]%{$reset_color%}'
RPROMPT='%{$fg_lgray%}[$(prompt_ip)]%{$reset_color%}'

TIMEFMT="
Time: $fg[red]%E$reset_color (%P)"
TIMEFMT_D="%J  %U user %S system %P cpu %*E total"
function timed {
  local TIMEFMT=$TIMEFMT_D
  time $@
}
REPORTTIME=2

#source /home/vulder/.oh-my-zsh/themes/tjkirch.zsh-theme

setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt INC_APPEND_HISTORY
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt NO_HIST_BEEP
setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_DUPS
# setopt incappendhistory
# setopt extendedhistory
# setopt sharehistory
export ZLS_COLORS=$LS_COLORS
omg_has_action_in_progress_symbol=''     #                  
zshGit(){
	# omg_can_fast_forward_symbol=''
	# omg_detached_symbol=''
	# omg_has_adds_symbol='+'
	# omg_has_cached_deletions_symbol=''
	# omg_has_cached_modifications_symbol=''
	# omg_has_deletions_symbol='-'
	# omg_has_diverged_symbol=''					#   
	# omg_has_modifications_symbol='✎'
	# omg_has_stashes_symbol=''
	# omg_has_untracked_files_symbol='∿'			#                ?    
	# omg_is_a_git_repo_symbol=''
	# omg_is_on_a_tag_symbol=''					#   
	# omg_merge_tracking_branch_symbol=''		#  
	# omg_needs_to_merge_symbol='ᄉ'
	# omg_ready_to_commit_symbol=''				#   →
	# omg_rebase_tracking_branch_symbol=''		#   
	# omg_should_push_symbol=''				#    
	
	omg_ungit_prompt=$PS1
	omg_second_line=$PS1' • '
	omg_second_line=$PS1${FG[141]}'⎤ '
	omg_not_tracked_branch_symbol=''
	# omg_is_a_git_repo_symbol='❤'
	omg_is_a_git_repo_symbol='⏣'
	omg_has_untracked_files_symbol='∿'
	omg_has_adds_symbol='+'
	omg_has_deletions_symbol='-'
	omg_has_cached_deletions_symbol='✖'
	omg_has_modifications_symbol='✎'
	omg_has_cached_modifications_symbol='☲'
	omg_ready_to_commit_symbol='→'
	omg_is_on_a_tag_symbol='⌫'
	omg_needs_to_merge_symbol='ᄉ'
	omg_has_upstream_symbol='⇅'
	omg_detached_symbol='⚯ '
	omg_can_fast_forward_symbol='»'
	omg_has_diverged_symbol='Ⴤ'
	omg_rebase_tracking_branch_symbol='↶'
	omg_merge_tracking_branch_symbol='ᄉ'
	omg_should_push_symbol='↑'
	omg_has_stashes_symbol='★'
	# omg_display_tag_name=true
	# omg_two_lines:=false
	zgen load arialdomartini/oh-my-git-themes oppa-lana-style.zsh-theme
	# PS1="${PS1/red/green}"
	# PS1="${PS1//red/yellow/}"
	# PS1="${PS1//K\{red\}/K{214\}}"
	
	# PS1="${PS1//K\{white\}/K{214\}}"
	# PS1="${PS1//K\{white\}/K{${fg_oA}\}}"
	def="$( declare -f custom_build_prompt )"
	# def="${def//{white\}/{190\}}"
	# def="${def//{white\}/{102\}}"
	# def="${def//{red\}/{214\}}"
	# def="${def//K{red\}%F{black\}/K{214\}%F{black\}}"
	# def="${def//K{black\}%F{red\}/K{black\}%F{99\}}"
	def="${def//{red\}/{141\}}"
	def="${def//{white\}/{240\}}"
	# local black_on_red="%K{red}%F{black}"
	RPROMPT=""
	eval "$def";
	# RPROMPT=''
}
# ______________________________________________[zaw]
function zaw-src-fuzzy() {
	OLDIFS=$IFS
	IFS=$'\n'
	candidates=($(find .))
	candidates=(${(iou)candidates[@]})
	IFS=$OLDIFS
	unset OLDIFS
	# Define what kind of action can be performed on the selected item
	# first: accept-line
	# second: accept-search
	actions=("zaw-callback-execute" "zaw-callback-append-to-buffer")
	act_descriptions=("execute" "append to edit buffer")
}
zaw-register-src -n fuzzy zaw-src-fuzzy

function fuzzy-start { kill-line; zaw-fuzzy }
zle -N fuzzy-start
bindkey '^F' fuzzy-start
# ----------------------------
bindkey -M filterselect '^M' accept-search
# ______________________________________________

function exists { which $1 &> /dev/null }
# if exists percol; then					# percol, [CTRL+r]
# 	function percol_select_history() { local tac; exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }; BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER"); CURSOR=$#BUFFER; zle -R -c; }
# 	zle -N percol_select_history; bindkey '^R' percol_select_history
# fi
function tmux_attach() {
	if [[ $1 == "" ]]; then PERCOL=percol
	else PERCOL="percol --query $1"
	fi
	sessions=$(tmux ls)
	[ $? -ne 0 ] && return
	session=$(echo $sessions | eval $PERCOL | cut -d : -f 1)
	if [[ -n "$session" ]]; then tmux att -t $session
	fi
}
autoload -U compinit
# compinit
# compinit -u
# compinit -C
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# source /root/.local/lib/python3.4/site-packages/powerline/bindings/zsh/powerline.zsh
unalias gg
export PATH="/usr/local/p/versions/python:$PATH"
if which ruby >/dev/null && which gem >/dev/null; then
    PATH="$(ruby -r rubygems -e 'puts Gem.user_dir')/bin:$PATH"
fi
source ~/.doto_src/enhancd/init.sh
eval "$(fasd --init auto)"

set bell-style none
export PATH="$PATH:/home/vulder/bin/"
export PATH="$PATH:/home/vulder/.local/bin/"
export PATH="/usr/lib/llvm/7_old/bin/:$PATH"

